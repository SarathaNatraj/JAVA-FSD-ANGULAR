Spring Data JPA
	@Entity, @Id, @GeneratedValue
	
Spring Data MongoDB
	@Document - each table/entity
	@Id -	Datatype of property should be string
	@Collection - collections of documents
	
	Model, Repository - will be changed
	Controller, Service - no change
	
SpringBoot REST API/Microservice with MongoDB
	1. Spring initializer - dependency (SpringWeb, Spring Devtools, Eureka Discovery Client, Spring Data MongoDB)
	2. application.properties - create database manually
		spring.data.mongodb.uri=mongodb://localhost:27017/
		spring.data.mongodb.database=payment-service
	3. Model -> 
		Annotate your with @Document annotation, @Id Datatype of property should be string
	4. Repository ->
		should extend MongoRepository
	5. No changes in service, controller layers
	
OpenFeign
	Communicate with one microservice to other
	Scenario - OrderService calls the ProductService to product details
		
	1. Both Service should have dependency
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>
	2. 	OrderService - consuming service - OpenFeign
		main.java -> EnableFeignClients
		Create a Feign Client Interface inside the OrderService
			@FeignClient(name="product-service", url="http://localhost:1111")
			public interface ProductClient {
				
				@GetMapping("/api/products/{id}")
				ProductDTO getProductById(@PathVariable Long id );

			}

		Service class
			@Autowired
			ProductClient productClient
		individual methods
			ProductDTO p = productClient.getProductById(id);
			
Circuit Breaker  or Fault tolerance 
		if customer-service is down, we are going to handle it by saying that "As of service is down, try later"
	
	Implementation:-
		Spring boot version 3.4.8
		1. add dependency
		<dependency>
			<groupId>org.springframework.cloud</groupId>		<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
		</dependency>
		2. Service class 
			@Autowired
			CircuitBreakerFactory circuitbreakerfactory
			
			public CustomerDTO getCustomer(long id) {
				return circuitBreakerFactory.create("customerdb").run(
						() -> restTemplate.getForObject(CUSTOMER_URL + "/" + id, CustomerDTO.class),
						throwable -> customerFallBack(id, throwable));
			}

			public CustomerDTO customerFallBack(long id, Throwable ex) {
				return new CustomerDTO(id, "Unknown Name (fallback)", "Unknown Name (fallback)", "Unknown Email (fallback)",
						"Unknown Phone Number (fallback)", null, 0);
			}

			



	
Pending Topics
		Circuit breaker - Today
		Kafka - Monday morning
		Load Balancing - Monday afternoon
		Config Server - Tuesday
		Distributed Tracing - Tuesday
		Spring Security - Wednesday
	
	
	
s